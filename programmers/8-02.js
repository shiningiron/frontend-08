// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수
// solution을 완성해 보세요. 배열의 맨 앞에 최대공약수,
// 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3,
// 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

function solution(n, m) {
  let max = 0;
  for (let i = 1; i <= m; i++) {
    if (n % i === 0 && m % i === 0) {
      console.log(i, n % i, m % i);
      max = i;
    }
  }
  let min = 0;
  for (let i = m; i <= m * n; i += m) {
    if (i % n === 0) {
      min = i;
      break;
    }
  }
  return [max, min];
}

// ------------------------------------------
function solution(n, m) {
  // 유클리드 호제법
  // 최대공약수를 구하기 위한 알고리즘(공식)

  // a를 b로 나눴을 때 (a가 b보다 클 경우) === 큰 수를 작은 수로 나눴을때
  // 나머지 값이 0이 되면, 작은수(b)가 최대공약수가 된다.
  // 나머지 값이 0이 되지 않으면, 작은 수(b)가 큰 수(a)가 되고
  // 나머지 값이 작은 수(b)가 된다.
  // 반복했을 때에 나머지 값이 0이 나오면, 작은 수(b)가 최대공약수가 된다.

  let a = m; // 큰수
  let b = n; // 작은수
  let r = 0; // a를 b로 나눴을 때 나머지 값

  while (a % b > 0) {
    r = a % b; // 큰 수에서 작은 수를 나눈 나머지 값 저장
    a = b; // 큰 수는 나눴을 때의 작은 수를 가져온다.
    b = r; // 작은 수는 나머지 값을 가져온다.
  }
  //최소공배수는 두 수를 곱한 수에 최대공약수로 나눠준 몫의 값
  return [b, (m * n) / b];
}
